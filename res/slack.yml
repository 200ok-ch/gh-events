# refs are unified. So all events have `ref` and `ref_type`.

push:
  text: >-
    :arrow_up:
    <<%= sender.html_url %>|<%= sender.login %>>
    <%= forced ? 'force-' : '' %>pushed
    <% if ref_type == 'branch' %><%= num = size || commits.count %> commit<%= num > 1 ? 's' : '' %> to<% end %>
    <%= ref_type %> `<%= ref %>`
    on <<%= repository.html_url %>|<%= repository.full_name %>>
    (<<%= compare %>|compare>)

commit_comment:
  text: >-
    :left_speech_bubble:
    new comment for
    commit <<%= comment.html_url %>|`<%= comment.commit_id %>`>
    on <<%= repository.html_url %>|<%= repository.full_name %>>
  attachments:
    - fallback: <%= comment.body %>
      color: '#36a64f'
      # pretext: Optional text that appears above the attachment block
      author_name: <%= sender.login %>
      author_link: <%= sender.html_url %>
      author_icon: <%= sender.avatar_url %>
      # title: Slack API Documentation
      # title_link: https://api.slack.com/
      text: <%= comment.body %>
      # fields:
      #   - title: Priority
      #     value: High
      #     short: false
      # image_url: http://my-website.com/path/to/image.jpg
      # thumb_url: http://example.com/path/to/thumb.png
      # footer: Slack API
      # footer_icon: https://platform.slack-edge.com/img/default_application_icon.png
      # ts: 123456789

create:
  text: >-
    :sparkles:
    <<%= sender.html_url %>|<%= sender.login %>>
    created
    <%= ref_type %> `<%= ref %>`
    on <<%= repository.html_url %>|<%= repository.full_name %>>

delete:
  text: >-
    :wastebasket:
    <<%= sender.html_url %>|<%= sender.login %>>
    deleted
    <%= ref_type %> `<%= ref %>`
    on <<%= repository.html_url %>|<%= repository.full_name %>>

issue_comment:
  text: >-
    :left_speech_bubble:
    <<%= sender.html_url %>|<%= sender.login %>>
    commented
    on <<%= comment.html_url %>|<%= issue.title %>>: <%= comment.body %>
  attachments:
    - fallback: <%= comment.body %>
      color: '#36a64f'
      author_name: <%= sender.login %>
      author_link: <%= sender.html_url %>
      author_icon: <%= sender.avatar_url %>
      text: <%= comment.body %>

issues:
  text: >-
    :inbox_tray:
    <<%= sender.html_url %>|<%= sender.login %>>
    <%= action %>
    issue <<%= issue.html_url %>|<%= issue.title %>>
    on <<%= repository.html_url %>|<%= repository.full_name %>>

issues.opened:
  text: >-
    :inbox_tray:
    new issue
    <<%= issue.html_url %>|<%= issue.title %>>
    on <<%= repository.html_url %>|<%= repository.full_name %>>
  attachments:
    - fallback: <%= issue.body %>
      color: red
      author_name: <%= sender.login %>
      author_link: <%= sender.html_url %>
      author_icon: <%= sender.avatar_url %>
      text: <%= issue.body %>

issues.labeled:
  text: >-
    :label:
    <<%= sender.html_url %>|<%= sender.login %>>
    labeled
    issue <<%= issue.html_url %>|<%= issue.title %>>
    on <<%= repository.html_url %>|<%= repository.full_name %>>
    as `<%= label.name %>`

pull_request:
  text: >-
    :gift:
    <<%= sender.html_url %>|<%= sender.login %>>
    <%= action %>
    PR <<%= pull_request.html_url %>|<%= pull_request.title %>>
    on <<%= repository.html_url %>|<%= repository.full_name %>>

pull_request.opened:
  text: >-
    :gift:
    <<%= sender.html_url %>|<%= sender.login %>>
    opened
    PR <<%= pull_request.html_url %>|<%= pull_request.title %>>
    on <<%= repository.html_url %>|<%= repository.full_name %>>
  attachments:
    - fallback: <%= pull_request.body %>
      color: red
      author_name: <%= sender.login %>
      author_link: <%= sender.html_url %>
      author_icon: <%= sender.avatar_url %>
      text: <%= pull_request.body %>

pull_request.labeled:
  text: >-
    <<%= sender.html_url %>|<%= sender.login %>>
    labeled
    PR <<%= pull_request.html_url %>|<%= pull_request.title %>>
    on <<%= repository.html_url %>|<%= repository.full_name %>>
    as `<%= label.name %>`

pull_request_review_comment:
  text: >-
    :left_speech_bubble:
    new review comment
    on <<%= comment.html_url %>|<%= pull_request.title %>>
  attachments:
    - fallback: <%= comment.body %>
      color: red
      author_name: <%= sender.login %>
      author_link: <%= sender.html_url %>
      author_icon: <%= sender.avatar_url %>
      text: <%= comment.body %>

star:
  text: >-
    :star:
    <<%= sender.html_url %>|<%= sender.login %>>
    <%= action == 'created' ? 'starred' : 'unstarred' %>
    <<%= repository.html_url %>|<%= repository.full_name %>>
    :star: <%= repository.stargazers_count %>

# Ignore other status udpates than CircleCI failures for the moment
status:
  text: >-
    <% if context.match(/circleci/) and state == 'failure' %>
    [`<%= stype %>`]
    <<%= target_url %> | CircleCI build >
    fails for commit
    <<%= commit.html_url %> | <%= commit.commit.message %>>
    from
    <<%= sender.html_url %>|<%= sender.login %>>
    <% end %>

deployment:
  text: An event of type `deployment` occurred.
deployment_status:
  text: An event of type `deployment_status` occurred.
fork:
  text: An event of type `fork` occurred.
gollum:
  text: An event of type `gollum` occurred.
member:
  text: An event of type `member` occurred.
membership:
  text: An event of type `membership` occurred.
page_build:
  text: An event of type `page_build` occurred.
public:
  text: An event of type `public` occurred.
release:
  text: An event of type `release` occurred.
repository:
  text: An event of type `repository` occurred.
team_add:
  text: An event of type `team_add` occurred.

# `false` will make it end with exit code 1
watch: false

# `no_template` will be used for recognized events which have no
# template assigned.
no_template:
  text: No template for event of type `<%= stype %>`.
  attachments:
    - fallback: Event details as json.
      color: gray
      text: |
        ```
        <%= JSON.unparse(self.marshal_dump) %>
        ```

# `unknown` will be used for events that could not be recognized.
unknown:
  text: An unknown event occurred (stype: `<%=stype%>`)
  attachments:
    - fallback: Event details as json.
      color: gray
      text: |
        ```
        <%= JSON.unparse(self.marshal_dump) %>
        ```
